.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1.5rem;
  width: 100%;
  max-width: none; /* allow full browser width */
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  width: 6rem; /* Make logo slightly bigger */
  margin: 0 auto;
}

.heading {
  font-size: 1.5rem;
  font-weight: bold;
  margin-top: 0.5rem;
  margin-bottom: 0.1rem; /* Reduce space below the heading */
  text-align: center;
}

.buttonContainer {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
}

.button {
  background-color: black;
  color: white;
  padding: 12px 25px;
  margin: 1px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 12px;
  transition: background-color 0.3s;
}

.button:hover {
  background-color: #444;
}

/* electrode/status styles removed (unused) */

.contentContainer {
  display: flex;
  justify-content: space-between;
  align-items: flex-start; /* Aligns content from the top */
  width: 100%;
  max-width: none;
  margin: 0 auto;
  gap: 2rem; /* Adds spacing between left and right sections */
}

.leftPanel {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-width: 300px; /* Limits the width of the left panel */
}

.rightPanel {
  flex: 1 1 0;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  max-width: none; /* allow wide charts */
}

.chartContainer {
  background: #fff;
  padding: 0.75rem 1rem;
  border-radius: 4px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center; /* center the responsive chart */
}

.chartsGrid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1.5rem;
  width: 100%;
}

.topContainer {
  display: flex;
  justify-content: start;
  align-items: stretch; /* Ensure children stretch to same height */
  gap: 1.5rem;
  margin-bottom: 1rem;
}

/* New shared card style for control items (connect and sensor control) */
.controlCard {
  background: #f3f4f6;
  padding: 1.25rem 1.5rem; /* more inner spacing */
  border-radius: 0.6rem;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex: 0 0 340px; /* slightly wider */
  min-height: 140px; /* larger height for breathing room */
}

.controlBox {
  background: #f3f4f6;
  padding: 1.25rem 1.5rem; /* match controlCard */
  border-radius: 0.6rem;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.08);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  flex: 0 0 340px;
  min-height: 140px;
}

.controlCard h3,
.controlBox h3 {
  margin: 0 0 12px 0; /* space between heading and buttons */
  font-size: 1.05rem;
}

.inputGroup {
  display: flex;
  flex-direction: column; /* Stack Min and Max Current vertically */
  gap: 10px; /* ✅ Adds spacing between Min and Max Current inputs */
  margin-bottom: 20px; /* ✅ Adds spacing before the Start Optimization button */
}

/* Inputs block inside the control box */
.inputsBlock {
  display: grid;
  /* two fluid columns for inputs, one fixed column on the right for the button */
  grid-template-columns: 1fr 1fr 220px;
  column-gap: 20px;
  row-gap: 12px;
  width: 100%;
  max-width: 900px; /* room for inputs + button column */
  /* allow the right column to stretch and vertically center the button */
  align-items: stretch;
  margin-bottom: 12px;
  /* make rows flexible so the right cell can span the full height */
  grid-auto-rows: 1fr;
}

.inputsLeftColumn {
  grid-column: 1 / 2;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.inputRightCell {
  grid-column: 3 / 4; /* put the button into the dedicated right column */
  /* span the full height of the grid so the button can be vertically centered */
  grid-row: 1 / -1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding-left: 12px; /* visual breathing room from inputs */
  padding-right: 6px;
  /* small downward nudge to position the button slightly lower visually */
  transform: translateY(40px);
}

/* helpers to explicitly place items into left or middle column */
.col1 {
  grid-column: 1 / 2;
}
.col2 {
  grid-column: 2 / 3;
}

.inputLabel {
  display: flex;
  flex-direction: column;
  font-size: 0.95rem;
  text-align: left;
  color: #222;
}

.inputRowRight {
  display: flex;
  align-items: center;
  width: 100%;
}

.labelRow {
  display: inline-flex;
  align-items: center;
  gap: 6px;
}

.textInput {
  background: #ffffff;
  border: 1px solid #e0e0e0;
  padding: 8px 10px;
  border-radius: 6px;
  margin-top: 6px;
  box-shadow: inset 0 1px 2px rgba(0,0,0,0.03);
  width: 100%;
  box-sizing: border-box;
}

.smallInput {
  width: 150px; /* used for frequency/level to keep compact; increased for spacing */
}

.levelInputWrap {
  margin-right: 18px; /* add breathing room to separate Level from the button */
}

.requiredAsterisk {
  color: #d9534f; /* red */
  margin-left: 6px;
}

.modifyArea {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.modifyAreaFixed {
  display: flex;
  align-items: center;
  justify-content: center;
}

.compactButton {
  padding: 8px 14px;
  min-height: 40px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
}

/* container for patient/sensor inputs placed to the right of the main control buttons */
.saveParamsContainer {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-left: 16px;
  min-width: 200px;
  align-items: flex-start;
}

/* layout for the controls row: main control buttons on the left, save group on the right */
.controlsRow {
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
  width: 100%;
  gap: 12px;
  margin-top: 12px;
}

.saveGroup {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 10px;
}

/* right-side gray panel for save metadata */
.savePanel {
  background: #f3f4f6;
  padding: 1rem;
  border-radius: 0.6rem;
  box-shadow: 0 8px 16px rgba(0,0,0,0.06);
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: stretch;
  width: 260px;
  margin-left: 1.25rem;
}

.saveError {
  color: #b00020; /* red */
  font-size: 0.9rem;
  margin-bottom: 4px;
}

/* place a control into the middle column and vertically span rows 2-3 (central area) */
.buttonMidCell {
  /* Ensure any legacy usage of this helper moves a control into the right column
     and spans the grid height so it ends up vertically centered instead of
     overlapping the middle column. */
  grid-column: 3 / 4;
  grid-row: 1 / -1; /* span full height */
  display: flex;
  align-items: center;
  justify-content: center;
  /* small downward nudge so the button sits slightly lower relative to the inputs */
  transform: translateY(140px);
}

.applyBadge {
  background: #d4f7dc; /* soft green */
  color: #0b6623;
  padding: 6px 10px;
  border-radius: 6px;
  font-weight: 600;
  box-shadow: 0 2px 6px rgba(0,0,0,0.08);
  animation: badgePop 0.4s ease-out;
}

@keyframes badgePop {
  from { transform: scale(0.9); opacity: 0; }
  to { transform: scale(1); opacity: 1; }
}

